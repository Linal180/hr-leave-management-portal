{"ast":null,"code":"var _jsxFileName = \"/home/dev/Projects/Screening-Test/frontend/src/contexts/AuthContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { STORAGE_KEYS, MESSAGES } from '../constants';\nimport apiService from '../services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(undefined);\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [token, setToken] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n\n  // Initialize auth state from localStorage\n  useEffect(() => {\n    const initializeAuth = async () => {\n      try {\n        const storedToken = localStorage.getItem(STORAGE_KEYS.AUTH_TOKEN);\n        const storedUser = localStorage.getItem(STORAGE_KEYS.USER_DATA);\n        if (storedToken && storedUser) {\n          setToken(storedToken);\n          setUser(JSON.parse(storedUser));\n\n          // Verify token is still valid by fetching profile\n          try {\n            const userProfile = await apiService.getProfile();\n            setUser(userProfile);\n          } catch (error) {\n            // Token is invalid, clear storage\n            logout();\n          }\n        }\n      } catch (error) {\n        console.error('Auth initialization error:', error);\n        logout();\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    initializeAuth();\n  }, []);\n  const login = async (email, password) => {\n    try {\n      setIsLoading(true);\n      const response = await apiService.login({\n        email,\n        password\n      });\n      setToken(response.token);\n      setUser(response.user);\n\n      // Store in localStorage\n      localStorage.setItem(STORAGE_KEYS.AUTH_TOKEN, response.token);\n      localStorage.setItem(STORAGE_KEYS.USER_DATA, JSON.stringify(response.user));\n    } catch (error) {\n      var _error$response, _error$response$data;\n      const errorMessage = ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || MESSAGES.ERROR.LOGIN_FAILED;\n      throw new Error(errorMessage);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const logout = () => {\n    setUser(null);\n    setToken(null);\n    localStorage.removeItem(STORAGE_KEYS.AUTH_TOKEN);\n    localStorage.removeItem(STORAGE_KEYS.USER_DATA);\n  };\n  const value = {\n    user,\n    token,\n    login,\n    logout,\n    isLoading,\n    isAuthenticated: !!user && !!token\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"mX4/AXRUN66G8j/NKXHYWKblzjI=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s2(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","STORAGE_KEYS","MESSAGES","apiService","jsxDEV","_jsxDEV","AuthContext","undefined","AuthProvider","children","_s","user","setUser","token","setToken","isLoading","setIsLoading","initializeAuth","storedToken","localStorage","getItem","AUTH_TOKEN","storedUser","USER_DATA","JSON","parse","userProfile","getProfile","error","logout","console","login","email","password","response","setItem","stringify","_error$response","_error$response$data","errorMessage","data","message","ERROR","LOGIN_FAILED","Error","removeItem","value","isAuthenticated","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","context","$RefreshReg$"],"sources":["/home/dev/Projects/Screening-Test/frontend/src/contexts/AuthContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';\nimport { User, AuthContextType } from '../types';\nimport { STORAGE_KEYS, MESSAGES } from '../constants';\nimport apiService from '../services/api';\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\ninterface AuthProviderProps {\n  children: ReactNode;\n}\n\nexport const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {\n  const [user, setUser] = useState<User | null>(null);\n  const [token, setToken] = useState<string | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n\n  // Initialize auth state from localStorage\n  useEffect(() => {\n    const initializeAuth = async () => {\n      try {\n        const storedToken = localStorage.getItem(STORAGE_KEYS.AUTH_TOKEN);\n        const storedUser = localStorage.getItem(STORAGE_KEYS.USER_DATA);\n\n        if (storedToken && storedUser) {\n          setToken(storedToken);\n          setUser(JSON.parse(storedUser));\n          \n          // Verify token is still valid by fetching profile\n          try {\n            const userProfile = await apiService.getProfile();\n            setUser(userProfile);\n          } catch (error) {\n            // Token is invalid, clear storage\n            logout();\n          }\n        }\n      } catch (error) {\n        console.error('Auth initialization error:', error);\n        logout();\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    initializeAuth();\n  }, []);\n\n  const login = async (email: string, password: string): Promise<void> => {\n    try {\n      setIsLoading(true);\n      const response = await apiService.login({ email, password });\n      \n      setToken(response.token);\n      setUser(response.user);\n      \n      // Store in localStorage\n      localStorage.setItem(STORAGE_KEYS.AUTH_TOKEN, response.token);\n      localStorage.setItem(STORAGE_KEYS.USER_DATA, JSON.stringify(response.user));\n    } catch (error: any) {\n      const errorMessage = error.response?.data?.message || MESSAGES.ERROR.LOGIN_FAILED;\n      throw new Error(errorMessage);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const logout = (): void => {\n    setUser(null);\n    setToken(null);\n    localStorage.removeItem(STORAGE_KEYS.AUTH_TOKEN);\n    localStorage.removeItem(STORAGE_KEYS.USER_DATA);\n  };\n\n  const value: AuthContextType = {\n    user,\n    token,\n    login,\n    logout,\n    isLoading,\n    isAuthenticated: !!user && !!token\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\nexport const useAuth = (): AuthContextType => {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,SAAS,QAAmB,OAAO;AAExF,SAASC,YAAY,EAAEC,QAAQ,QAAQ,cAAc;AACrD,OAAOC,UAAU,MAAM,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEzC,MAAMC,WAAW,gBAAGT,aAAa,CAA8BU,SAAS,CAAC;AAMzE,OAAO,MAAMC,YAAyC,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EACzE,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGb,QAAQ,CAAc,IAAI,CAAC;EACnD,MAAM,CAACc,KAAK,EAAEC,QAAQ,CAAC,GAAGf,QAAQ,CAAgB,IAAI,CAAC;EACvD,MAAM,CAACgB,SAAS,EAAEC,YAAY,CAAC,GAAGjB,QAAQ,CAAC,IAAI,CAAC;;EAEhD;EACAC,SAAS,CAAC,MAAM;IACd,MAAMiB,cAAc,GAAG,MAAAA,CAAA,KAAY;MACjC,IAAI;QACF,MAAMC,WAAW,GAAGC,YAAY,CAACC,OAAO,CAACnB,YAAY,CAACoB,UAAU,CAAC;QACjE,MAAMC,UAAU,GAAGH,YAAY,CAACC,OAAO,CAACnB,YAAY,CAACsB,SAAS,CAAC;QAE/D,IAAIL,WAAW,IAAII,UAAU,EAAE;UAC7BR,QAAQ,CAACI,WAAW,CAAC;UACrBN,OAAO,CAACY,IAAI,CAACC,KAAK,CAACH,UAAU,CAAC,CAAC;;UAE/B;UACA,IAAI;YACF,MAAMI,WAAW,GAAG,MAAMvB,UAAU,CAACwB,UAAU,CAAC,CAAC;YACjDf,OAAO,CAACc,WAAW,CAAC;UACtB,CAAC,CAAC,OAAOE,KAAK,EAAE;YACd;YACAC,MAAM,CAAC,CAAC;UACV;QACF;MACF,CAAC,CAAC,OAAOD,KAAK,EAAE;QACdE,OAAO,CAACF,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;QAClDC,MAAM,CAAC,CAAC;MACV,CAAC,SAAS;QACRb,YAAY,CAAC,KAAK,CAAC;MACrB;IACF,CAAC;IAEDC,cAAc,CAAC,CAAC;EAClB,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMc,KAAK,GAAG,MAAAA,CAAOC,KAAa,EAAEC,QAAgB,KAAoB;IACtE,IAAI;MACFjB,YAAY,CAAC,IAAI,CAAC;MAClB,MAAMkB,QAAQ,GAAG,MAAM/B,UAAU,CAAC4B,KAAK,CAAC;QAAEC,KAAK;QAAEC;MAAS,CAAC,CAAC;MAE5DnB,QAAQ,CAACoB,QAAQ,CAACrB,KAAK,CAAC;MACxBD,OAAO,CAACsB,QAAQ,CAACvB,IAAI,CAAC;;MAEtB;MACAQ,YAAY,CAACgB,OAAO,CAAClC,YAAY,CAACoB,UAAU,EAAEa,QAAQ,CAACrB,KAAK,CAAC;MAC7DM,YAAY,CAACgB,OAAO,CAAClC,YAAY,CAACsB,SAAS,EAAEC,IAAI,CAACY,SAAS,CAACF,QAAQ,CAACvB,IAAI,CAAC,CAAC;IAC7E,CAAC,CAAC,OAAOiB,KAAU,EAAE;MAAA,IAAAS,eAAA,EAAAC,oBAAA;MACnB,MAAMC,YAAY,GAAG,EAAAF,eAAA,GAAAT,KAAK,CAACM,QAAQ,cAAAG,eAAA,wBAAAC,oBAAA,GAAdD,eAAA,CAAgBG,IAAI,cAAAF,oBAAA,uBAApBA,oBAAA,CAAsBG,OAAO,KAAIvC,QAAQ,CAACwC,KAAK,CAACC,YAAY;MACjF,MAAM,IAAIC,KAAK,CAACL,YAAY,CAAC;IAC/B,CAAC,SAAS;MACRvB,YAAY,CAAC,KAAK,CAAC;IACrB;EACF,CAAC;EAED,MAAMa,MAAM,GAAGA,CAAA,KAAY;IACzBjB,OAAO,CAAC,IAAI,CAAC;IACbE,QAAQ,CAAC,IAAI,CAAC;IACdK,YAAY,CAAC0B,UAAU,CAAC5C,YAAY,CAACoB,UAAU,CAAC;IAChDF,YAAY,CAAC0B,UAAU,CAAC5C,YAAY,CAACsB,SAAS,CAAC;EACjD,CAAC;EAED,MAAMuB,KAAsB,GAAG;IAC7BnC,IAAI;IACJE,KAAK;IACLkB,KAAK;IACLF,MAAM;IACNd,SAAS;IACTgC,eAAe,EAAE,CAAC,CAACpC,IAAI,IAAI,CAAC,CAACE;EAC/B,CAAC;EAED,oBACER,OAAA,CAACC,WAAW,CAAC0C,QAAQ;IAACF,KAAK,EAAEA,KAAM;IAAArC,QAAA,EAChCA;EAAQ;IAAAwC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B,CAAC;AAAC1C,EAAA,CA5EWF,YAAyC;AAAA6C,EAAA,GAAzC7C,YAAyC;AA8EtD,OAAO,MAAM8C,OAAO,GAAGA,CAAA,KAAuB;EAAAC,GAAA;EAC5C,MAAMC,OAAO,GAAG1D,UAAU,CAACQ,WAAW,CAAC;EACvC,IAAIkD,OAAO,KAAKjD,SAAS,EAAE;IACzB,MAAM,IAAIqC,KAAK,CAAC,6CAA6C,CAAC;EAChE;EACA,OAAOY,OAAO;AAChB,CAAC;AAACD,GAAA,CANWD,OAAO;AAAA,IAAAD,EAAA;AAAAI,YAAA,CAAAJ,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}